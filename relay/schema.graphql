schema {
  query: RootQueryType
  mutation: RootMutationType
  subscription: RootSubscriptionType
}

directive @action(mode: ActionMode!) on SUBSCRIPTION | MUTATION | QUERY

directive @put on INLINE_FRAGMENT | FRAGMENT_SPREAD | FIELD

enum ActionMode {
  EXTERNAL
  INTERNAL
}

type AllergyInfo {
  allergen: String
  severity: String
}

type Category implements SearchResult {
  description: String
  items(filter: MenuItemFilter, order: SortOrder = ASC): [MenuItem]
  name: String
}

type Customer implements User {
  email: String
  name: String
  orders: [Order]
}

scalar Date

scalar Decimal

type Employee implements User {
  email: String
  name: String
}

type InputError {
  key: String!
  message: String!
}

type MenuItem implements SearchResult {
  addedOn: Date
  allergyInfo: [AllergyInfo]
  category: Category
  description: String
  id: ID
  name: String
  orderHistory(since: Date): OrderHistory
  price: Decimal
}

# Filter query by...
input MenuItemFilter {
  addedAfter: Date
  addedBefore: Date
  category: String
  name: String
  pricedAbove: Float
  pricedBelow: Float
  tag: String
}

input MenuItemInput {
  categoryId: ID!
  description: String
  name: String!
  price: Decimal!
}

type MenuItemResult {
  errors: [InputError]
  menuItem: MenuItem
}

type Order {
  customerNumber: Int
  id: ID
  items: [OrderItem]
  state: String
}

type OrderHistory {
  # Gross Revenue
  gross: Float!
  orders: [Order]
  quantity: Int!
}

type OrderItem {
  name: String
  quantity: Int
}

input OrderItemInput {
  menuItemId: ID!
  quantity: Int!
}

type OrderResult {
  errors: [InputError]
  order: Order
}

input PlaceOrderInput {
  customerNumber: Int
  items: [OrderItemInput!]!
}

enum Role {
  CUSTOMER
  EMPLOYEE
}

type RootMutationType {
  completeOrder(id: ID!): OrderResult
  createMenuItem(input: MenuItemInput!): MenuItemResult
  placeOrder(input: PlaceOrderInput!): OrderResult
  readyOrder(id: ID!): OrderResult
  signIn(email: String!, password: String!, role: Role!): Session
}

type RootQueryType {
  me: User
  menuItem(id: ID!): MenuItem

  # Gets a list of all available menu items
  menuItems(filter: MenuItemFilter, order: SortOrder = ASC): [MenuItem]
  search(match: String!): [SearchResult]
}

type RootSubscriptionType {
  newMenuItem: MenuItem
  newOrder: Order
  updateOrder(id: ID!): Order
}

interface SearchResult {
  name: String
}

type Session {
  token: String
  user: User
}

enum SortOrder {
  ASC
  DESC
}

interface User {
  email: String
  name: String
}

