<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8"/>
    <meta http-equiv="X-UA-Compatible" content="IE=edge"/>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>

    <link rel="stylesheet" href="<%= Routes.static_path(@conn, "/css/app.css") %>"/>
    <script src="https://cdn.jsdelivr.net/npm/vue@2.5.17/dist/vue<%= if Mix.env == :prod, do: ".min" %>.js"></script>

    <% env = if Mix.env == :dev, do: "development", else: "production.min" %>
    <script crossorigin src="https://unpkg.com/react@16.7.0-alpha.2/umd/react.<%= env %>.js"></script>
    <script crossorigin src="https://unpkg.com/react-dom@16.7.0-alpha.2/umd/react-dom.<%= env %>.js"></script>

    <title>Learn Vue!</title>
  </head>

  <body>
    <%  border    = ~E"<div style='border: 0.5px black solid; margin-bottom: 1.5rem;'></div>" %>
    <%  templates = ~w(counter calculator election react_stories stories hero) %>

    <%= for template <- templates, do: render("_#{template}.html") |> concat(border) %>

    <script type="text/javascript" src="<%= Routes.static_path(@conn, "/js/app.js") %>"></script>
  </body>
</html>
<!-- in all, I'd prob. be best off just using jQuery for stories search...

document.getElementById("search").addEventListener("onKeydown",
  event => $.get("/endpoint", data: {query: event.target.value})
).then(payload => {
  document.getElementById("stories") // replace children w/ payload stories
})

the problem here is this would re-render all children each search.
React would absolutely do this more efficiently, even with the duplicate HTML.

A work-around is to send the payload as an object where keys are a prop unique
to each child (like React).
Then, I would handroll a traversal of the children, checking that unique attribute
against the payload object.
If it was there, I wouldn't remove the child and I'd mark that payload result as rendered.
If it wasn't there, I'd remove it.
Then, I'd add all unrendered values in the payload.

While this works, it would be a lot of JS logic that I get for free in React.
Also, React has an optimized diffing algorithm. For this use-case, it doesn't
make a difference, but usually it will.
-->
